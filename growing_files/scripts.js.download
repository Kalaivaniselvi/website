var inv_itypes = null;
function autocomplete(inp, query, select) {
  var currentFocus;
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      this.parentNode.appendChild(a);
      query(val, (arr) => {
      for (i = 0; i < arr.length; i++) {
        b = document.createElement("DIV");
        for (let key of Object.keys(arr[i])) {
            b.setAttribute("data-" + key, arr[i][key]);
        }
        val = val.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        var re = new RegExp("(" + val.split(' ').join('|') + ")", "gi");
        b.innerHTML = arr[i].value.replace(re, "<b>$1</b>");
        b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getAttribute('data-value');
              let ret = {}
              for (let i = 0; i < this.attributes.length; i++) {
                var aname = this.attributes[i].name;
                var aval = this.attributes[i].value;
                if (aname.startsWith('data-'))
                    ret[aname.substring(5, aname.length)] = aval;
              }
              select(ret);
              closeAllLists();
        });
        a.appendChild(b);
      }
    });
  });
  inp.addEventListener("keydown", function(e) {
      getTypeSettings();
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        currentFocus++;
        addActive(x);
      } else if (e.keyCode == 38) { //up
        currentFocus--;
        addActive(x);
      } else if (e.keyCode == 13) {
        e.preventDefault();
        if (currentFocus > -1) {
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    if (!x) return false;
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
          x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  function getTypeSettings() {
    if (inv_itypes) return;

    var client = new XMLHttpRequest();
    client.timeout = 30000;  //30 secs
    client.open(
        "GET", "/aalam/ecomm/setting/item_types", true);
    client.onreadystatechange = function() {
        if (client.readyState == 4) {
            if (client.status == 200) {
                let ret = [];
                let resp = JSON.parse(client.response);
                inv_itypes = resp.invalids || [];
            }
        }
    }
    client.send(null);

  }
} 
function stringifyParams(obj) {
   var str = "";
   for (var key in obj) {
       if (str != "") {
           str += "&";
       }
       str += key + "=" + encodeURIComponent(obj[key]);
   }
   return str;
}
function queryProducts(val, callback) {
   if (!inv_itypes)return;

   let params = {'search': val, 'suggest': true};
   if (inv_itypes && inv_itypes.length)
       params['type_id_ne'] = inv_itypes.join(",");
   var client = new XMLHttpRequest();
   client.timeout = 30000;  //30 secs
   client.open(
       "GET", "/aalam/stock/items" + "?" + stringifyParams(params), true);
   client.onreadystatechange = function() {
       if (client.readyState == 4) {
           if (client.status == 200) {
               let ret = [];
               let resp = JSON.parse(client.response);
               for (let ix = 0; ix < resp.found.length; ix++) {
                 ret.push({'value': resp.found[ix]})
               }
               callback(ret);
           }
       }
   }
   client.send(null);
}
function productSelected(selected_item) {
  //window.open(`${global.gPubUrlRoot}/item/` + selected_item.id + "?root");
  window.location.href = `/store/?search=${selected_item.value}`;
}
function setupNavWrapper(el) {
    if (window.innerWidth < 960) {
        el.style.backgroundColor = "rgba(134,223,200,0.32)";
    } else {
        el.style.backgroundColor = "transparent";
    }
}
window.addEventListener("load", function() {
    let els = document.querySelectorAll('input.search-input');
    for (let el of els) {
    autocomplete(el, (val, cb) => {
       queryProducts(val, cb)}, (selected) => {
           productSelected(selected)
       });
    }
    let el = document.querySelector(".mob-dt-navwrapper");
    setupNavWrapper(el)
    window.addEventListener("resize",   () => {
        setupNavWrapper(el)
    })
})
